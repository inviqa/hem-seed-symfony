variables:
  DATABASE_HOST: mysql
  DATABASE_NAME: <%= config.name %>
  DATABASE_USER: <%= config.name %>
  CP_ENVIRONMENT:
    name: CP_ENVIRONMENT
    expression: '"<%= config.name %>-" ~ code_reference.branch'
  CP_ENVIRONMENT_DOMAIN:
    name: CP_ENVIRONMENT_DOMAIN
    # construct a domain from the branch no longer than 64 characters
    expression: 'slugify(hash_long_domain_prefix(code_reference.branch, 64 - <%= "-#{config.name}.webpipeline.net".length %>)) ~ "-<%= config.name %>.webpipeline.net"'
  SENDMAIL_RELAY_HOST:
    name: SENDMAIL_RELAY_HOST
    expression: '"mailcatcher.<%= config.name %>-" ~ slugify(code_reference.branch) ~ ".svc.cluster.local"'
  ASSETS_S3_BUCKET: '<%= config.asset_bucket %>'
  ASSETS_ENV: ''
  DEVELOPMENT_MODE: 'false'
  SYMFONY_ENV: prod

pipelines:
  - name: Production
    tasks: &standard_tasks
      - web_image
      - infrastructure
      - reserve_ip
      - migration
      - deployment
    condition: 'code_reference.branch in ["develop", "qa", "staging", "production"]'
  - name: Pull Requests
    tasks: *standard_tasks
    condition: '"Ready for review" in pull_request.labels'
    variables:
      ASSETS_ENV: development
  - name: Remote Development
    tasks: *standard_tasks
    variables:
      DEVELOPMENT_MODE: 'true'
      ASSETS_ENV: development
      SYMFONY_ENV: dev
    condition: 'code_reference.branch matches "#^cpdev/#"'

defaults:
  cluster: ${CLUSTER}
  environment:
    name: '"${CP_ENVIRONMENT}"'

tasks:
  web_image:
    build:
      environment:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        ASSETS_S3_BUCKET: ${ASSETS_S3_BUCKET}
        ASSETS_ENV: ${ASSETS_ENV}
        DEVELOPMENT_MODE: ${DEVELOPMENT_MODE}
        RUN_BUILD: 'true'
        SYMFONY_ENV: ${SYMFONY_ENV}

    services:
      web:
        image: quay.io/organisation/<%= config.name %>

  infrastructure:
    deploy:
      services:
        mysql:
          specification:
            volumes:
              - type: persistent
                name: database-volume
                capacity: 5Gi
                storage_class: default

            volume_mounts:
              - name: database-volume
                mount_path: /var/lib/mysql

            command:
              - /usr/local/bin/docker-entrypoint.sh
              - mysqld
              - --ignore-db-dir=lost+found
              - --max_allowed_packet=128M

            ports:
              - 3306

            resources:
              requests:
                cpu: 50m
                memory: 250Mi
              limits:
                cpu: 500m
                memory: 2Gi

            environment_variables:
              MYSQL_PASSWORD: ${DATABASE_PASSWORD?:}
              MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD?:}
              MYSQL_DATABASE: ${DATABASE_NAME}
              MYSQL_USER: ${DATABASE_USER}

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 3306

        mailcatcher:
          specification:
            accessibility:
              from_cluster: true
              from_external: false
            ports:
              - 1025
              - 1080

            resources:
              limits:
                cpu: 50m
                memory: 1Gi

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 1025

        tideways:
          specification:
            resources:
              limits:
                cpu: 50m
                memory: 100Mi
            ports:
              - 9135

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 9135

        sshforward:
          condition: 'code_reference.branch matches "#^cpdev/#"'
          specification:
            ports:
              - 9000
            environment_variables:
              SSH_FORWARD_PASSWORD: ${SSH_FORWARD_PASSWORD?:}

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 22

  reserve_ip:
    filter:
      expression: 'tasks.infrastructure.services.mysql.created'
    deploy:
      services:
        web:
          endpoints: &WEB_ENDPOINTS
            - name: web
              cloud_flare_zone:
                zone_identifier: ${CLOUD_FLARE_ZONE?:}
                authentication:
                    email: ${CLOUD_FLARE_EMAIL?:}
                    api_key: ${CLOUD_FLARE_API_KEY?:}
                proxied: true
                host:
                  expression: '"${CP_ENVIRONMENT_DOMAIN}"'
              ingress:
                class: nginx
                host:
                  expression: '"${CP_ENVIRONMENT_DOMAIN}"'
          specification:
            source:
              image: continuouspipe/landing-page
              tag: latest

            ports:
              - 80
              - 443

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 80

  deployment:
    deploy:
      services:
        web:
          endpoints: *WEB_ENDPOINTS

          specification:
            environment_variables: &WEB_ENV_VARS
              AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID?:}
              AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY?:}
              ASSETS_S3_BUCKET: ${ASSETS_S3_BUCKET}
              ASSETS_ENV: ''
              APP_USER_LOCAL: false
              DATABASE_HOST: ${DATABASE_HOST}
              DATABASE_NAME: ${DATABASE_NAME}
              DATABASE_USER: ${DATABASE_USER}
              DATABASE_PASSWORD: ${DATABASE_PASSWORD?:}
              DEVELOPMENT_MODE: ${DEVELOPMENT_MODE}
              AUTH_HTTP_ENABLED: true
              AUTH_HTTP_HTPASSWD: ${AUTH_HTTP_HTPASSWD?:}
              AUTH_IP_WHITELIST_ENABLED: true
              AUTH_IP_WHITELIST: ${AUTH_IP_WHITELIST?:}
              TRUSTED_REVERSE_PROXIES: ${TRUSTED_REVERSE_PROXIES?:}
              SYMFONY_ENV: ${SYMFONY_ENV}
              TIDEWAYS_API_KEY: ${TIDEWAYS_API_KEY?:}
              SENDMAIL_RELAY_HOST: ${SENDMAIL_RELAY_HOST}
              WEB_HOST: ${CP_ENVIRONMENT_DOMAIN}

            resources:
              requests:
                cpu: 50m
                memory: 50Mi

              limits:
                cpu: 1
                memory: 2G

            ports:
              - 80
              - 443

          deployment_strategy:
            readiness_probe:
              type: tcp
              port: 80

            liveness_probe:
              type: exec
              command:
                - curl
                - -k
                - -I
                - -X GET
                - https://localhost/
              initial_delay_seconds: 30
              period_seconds: 300 # 5 minutes
              success_threshold: 1
              failure_threshold: 5

        cron:
          specification:
            accessibility:
              from_cluster: false

            source:
              from_service: web

            ports: []

            environment_variables:
              <<: *WEB_ENV_VARS
              START_MODE: cron

            resources:
              requests:
                cpu: 50m
                memory: 20Mi

              limits:
                cpu: 1
                memory: 1G

  migration:
    run:
      image:
        from_service: web

      commands:
        - container migrate

      environment_variables:
        <<: *WEB_ENV_VARS
        ASSETS_ENV: ${ASSETS_ENV}
        ASSETS_FILES_ENABLED: 'false'
