# <%= config.name %> Setup

Please follow the below steps to get started, if you encounter any issues installing the dependencies or provisioning the development environment, please check the [Common Issues](#common-issues) section first.

## Clone the project

Clone the project into your local file system:

```bash
git clone <%= config.git_url %>
```

## Development Environment

### Getting Started

#### Prerequisites

##### General

- A GitHub Token
  - This can be generated at [GitHub](https://github.com/settings/tokens).
- Access to LastPass
- Access to AWS
  - If you do not have access you can request it from support.
- Tideways API Key
  - If you wish to run tideways profiling on your development environment, you will find this in LastPass.

##### Docker

- A working docker setup
  - On MacOS, use [Docker for Mac](https://docs.docker.com/docker-for-mac/install/).
  - On Linux, add the official Docker repository and install the "docker-ce" package.
- Ruby 2.2 if you want to use the rake tasks.
- On MacOS, if you wish to use [docker-sync](https://github.com/EugenMayer/docker-sync) for near-native file access speed run:
  ```bash
  gem install docker-sync
  ```
  You should also add:
  ```
  export RAKE_USE_DOCKER_SYNC=true
  ```
  to your `~/.bash_profile`

#### Setup

1. Copy `docker.env.dist` to `docker.env`
2. Fill in docker.env's secrets - do not commit this file!
   - TIDEWAYS_API_KEY can be found in LastPass
   - AWS_ACCESS_KEY_ID is found in your Hem configuration. Check `~/.hem/config.yaml` and `~/.hobo/config.yaml`.
   - AWS_SECRET_ACCESS_KEY should be found wherever AWS_ACCESS_KEY_ID was.
3. Run the following:
   - for bash/zsh: `eval "$(echo $(printf "%s " $(cat docker.env)) docker-compose build)"`
   - for fish: `eval env (echo (printf "'%s' " (cat docker.env)) docker-compose build)`
4. Run this to let you see the site from a nice domain:
    - On Linux/OSX: `echo "127.0.0.1 <%= config.hostname %>" | sudo tee -a /etc/hosts`
    - On Windows, open up `C:\Windows\system32\etc\HOSTS` in your favourite text editor as admin and add `127.0.0.1 <%= config.hostname %>`
5. Setup docker-compose.override config and start docker-compose up:

```bash
bundle install

rake docker:setup
docker-compose up -d
```

or you can use the rake-tasks-docker helper to perform a setup and up in one go via:

```bash
bundle install

rake docker:up
```
The `rake docker:up` task will automatically start up `docker-sync` if you are using that.

Once the environment is running, you should be able to browse to the site at
[https://<%= config.hostname %>](https://<%= config.hostname %>)

### Usage

```
Usage:
  rake <target>[<arguments>]

Targets:
  docker:setup               initial project setup and configuration.
  docker:up                  start up the docker-compose environment
```

### Customising

1. Change the variables that you want to in the `docker-compose.override.yml`
   - `RUN_BUILD` being `false` will stop the build from running each time you bring up your environment.
   - `XDEBUG_REMOTE_ENABLED` can be turned on to allow Xdebug to connect and debug the site. We recommend to turn off Tideways when Xdebug is on.
   - `TIDEWAYS_ENABLED` can be turned off to allow Xdebug to not pick up `tideways.php` as the entry point for the application.
2. Stop and start your environment: `docker-compose stop; docker-compose up -d`

#### XDebug Setup
1. Set `XDEBUG_REMOTE_ENABLED` to `true` and `TIDEWAYS_ENABLED` to `false` in `docker-compose.override.yml`, after copying it from `docker-compose.override.yml.dist` if you haven't already
2. Run `docker-compose stop web; docker-compose up -d web`
3. Run `ssh -p 2222 forward@localhost -N -R 9000:localhost:9000` in another tab
4. In PHPStorm, configure a web server with path mapping /app/ to the project directory.
5. In PHPStorm, click the listen for connections button in the top right
6. In your browser, use an extension to set the right cookies to trigger Xdebug.

## ContinuousPipe remote environment

1. Request access from the team in #<%= config.name %> to see [the ContinuousPipe Project](https://ui.continuouspipe.io/project/<%= config.name %>/flows)
2. Set up [CP Remote](https://docs.continuouspipe.io/remote-development/getting-started/)
3. Go to the "<%= config.name %>" project on ContinuousPipe
4. Set up a development environment using the "Developer Environments" tab
5. Copy the command it gives you to your terminal (note, do not share the token it gives you with anyone!)
6. Wait for the build to finish
7. Answer which pod you would like to connect to by default. This will probably be "web".
8. Run `cp-remote watch` to sync your local filesystem changes with the remote environment.
9. In another tab, run `cp-remote bash` to log in to your remote "web" container.
10. Develop away, ask in #<%= config.name %> or #continuous-pipe on Slack if you run into problems!

The credentials for the HTTP auth that will be needed if you are on a non-whitelisted IP Address can be found in the
Lastpass entry `<%= config.name %> on CP: HTTP Basic Auth` in the folder `Shared-<%= config.name %>-Accounts`

#### XDebug Setup
This will only work on development environments, as `sshforward` is only deployed there.

1. In a `cp-remote bash` session, run the following to enable xdebug, disable tideways and increase the timeout for PHP requests to 10000 seconds:
```
XDEBUG_REMOTE_ENABLED="true" TIDEWAYS_ENABLED="false" PHP_MAX_EXECUTION_TIME="10000" container confd && pkill php-fpm && pkill nginx
```
2. On your machine in another terminal window, run `cp-remote forward -s sshforward 2222:22`
3. On your machine in another terminal window, run `ssh -p 2222 forward@localhost -N -R 9000:localhost:9000`
4. Configure PHPStorm or your desired IDE to listen for requests on port 9000.

## Hem VM

#### Install Dependencies

1. Install the latest version of Hem from [inviqa/hem on GitHub](https://github.com/inviqa/hem)

2. Install the latest version of Vagrant from [http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)

#### Provision Environment

You can now build the development environment for the first time. In the project directory, execute the following command:

    $ hem vm up

You should now be able to access the site at [http://<%= config.hostname %>](http://<%= config.hostname %>)

#### Hem Usage

With the Hem enabled environment up and running please make use of the following commands for day to day usage.

```bash
hem vm start  # Starts the vm without the overhead of provisioning
hem vm stop   # Graceful halt of the vm
hem vm ssh    # Start an SSH session on the VM
hem vm mysql  # Connect to the database on the VM
```

#### Common Issues

As setup issues are encountered please detail with step by step fix instructions, and where possible update the project itself to provide a more permanent fix.

 - **Ruby stacktrace mentioning 'hostsupdater' during 'hem vm up'**
   Please remove any <%= config.hostname %> entries from your hosts file and retry

# License

Copyright 2014-2017, Inviqa

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
